input ChangePasswordInput {
  oldPassword: String!

  """user new password"""
  password: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  error: String
  clientMutationId: String
}

"""coach data"""
type coach {
  """The ID of an object"""
  id: ID!
  _id: String
  staff: String
  name: String
  lastname: String
  job: String
  taxId: String
  team: team
}

"""A connection to a list of items."""
type CoachConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CoachEdge]
}

"""An edge in a connection."""
type CoachEdge {
  """The item at the end of the edge"""
  node: coach

  """A cursor for use in pagination"""
  cursor: String!
}

input LoginEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

"""Root of ... mutations"""
type Mutation {
  """Login Mutation"""
  LoginEmail(input: LoginEmailInput!): LoginEmailPayload
  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload
  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload
  RegisterPlayer(input: RegisterPlayerInput!): RegisterPlayerPayload
  RemovePlayer(input: RemovePlayerInput!): RemovePlayerPayload
  RegisterTeam(input: RegisterTeamInput!): RegisterTeamPayload
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""player data"""
type player {
  """The ID of an object"""
  id: ID!
  _id: String
  status: Int
  name: String
  lastname: String
  position: String
  taxId: String
  team: team
}

"""A connection to a list of items."""
type PlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlayerEdge]
}

"""An edge in a connection."""
type PlayerEdge {
  """The item at the end of the edge"""
  node: player

  """A cursor for use in pagination"""
  cursor: String!
}

"""The root of all queries"""
type Query {
  me: User
  users: [User]
  player(_id: String): player
  players(
    after: String
    first: Int
    before: String
    last: Int

    """Status players - 1: enable; 99: disabled"""
    status: Int

    """Date - the newest players added until 10 days before from this date"""
    new: String
  ): PlayerConnection
  coach(_id: String): coach

  """get all coaches"""
  coaches(
    after: String
    first: Int
    before: String
    last: Int

    """Coaches per squad - 1: offense; 2: defense; 3: special teams"""
    staff: Int
  ): CoachConnection
}

input RegisterEmailInput {
  name: String!
  username: String!
  email: String!
  password: String!
  team: String!
  clientMutationId: String
}

type RegisterEmailPayload {
  token: String
  error: String
  clientMutationId: String
}

input RegisterPlayerInput {
  _id: String
  status: Int
  name: String!
  lastname: String
  position: String
  taxId: String!
  team: String!
  clientMutationId: String
}

type RegisterPlayerPayload {
  newPlayer: player
  error: String
  clientMutationId: String
}

input RegisterTeamInput {
  _id: String
  status: Int
  name: String
  tradeName: String
  taxId: String
  clientMutationId: String
}

type RegisterTeamPayload {
  newTeam: team
  error: String
  clientMutationId: String
}

input RemovePlayerInput {
  _id: String!
  clientMutationId: String
}

type RemovePlayerPayload {
  name: String
  lastname: String
  error: String
  clientMutationId: String
}

"""team data"""
type team {
  """The ID of an object"""
  id: ID!
  _id: String
  status: Int
  name: String
  tradeName: String
  taxId: String
}

"""User data"""
type User {
  """The ID of an object"""
  id: ID!
  _id: String
  name: String
  username: String
  email: String
  password: String
  team: team
}